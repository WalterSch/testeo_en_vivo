# -*- coding: utf-8 -*-
"""
Created on Fri Jun 27 12:23:02 2025

@author: walter.schneider
"""


import time
import random
import os
import requests
import pandas as pd
from datetime import datetime
import json
import geopandas as gpd
from shapely.geometry import Point
import matplotlib.pyplot as plt

# Se indica Directorio
directorio = r"C:\Users\walter.schneider\Documents\CSV\Komatsu"
os.chdir(directorio)

# ====== CONFIGURACI√ìN ======
USERNAME = "296969_$)m;/?UY"
PASSWORD = "%fIs(1U&3hyzDLh{"
SUBSCRIBER_ID = "296969"
PAGE = 1
BASE_URL = "https://isoapi.komtrax.komatsu"

""" FUNCIONES """

def obtener_datos_snapshot(token, subscriber_id, page=1):
    """
    Consulta los datos m√°s recientes (snapshot) de la flota.
    """
    url = f"{BASE_URL}/provider/v1/{subscriber_id}/Fleet/{page}"
    headers = {"Authorization": f"Bearer {token}"}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Error al obtener datos: {response.status_code}\n{response.text}")

def obtener_datos_timeseries(token, subscriber_id, make_code, model,serial, dataitem, startdate, enddate, page=1):
    """
    Consulta datos hist√≥ricos (Time Series) de un √≠tem espec√≠fico para una m√°quina.

    Par√°metros:
    - token: str ‚Üí Token de autenticaci√≥n
    - subscriber_id: str ‚Üí ID del suscriptor
    - make_code: str ‚Üí C√≥digo del fabricante (para Komatsu es "0001")
    - modelo: str ‚Üí Modelo del equipo (ej. "PC200-10")
    - serie: str ‚Üí N√∫mero de serie del equipo (ej. "A12345")
    - data_item: str ‚Üí Nombre del √≠tem a consultar (ej. "CumulativeOperatingHours", "FuelUsedInThePreceding24Hours")
    - fecha_inicio: str ‚Üí Fecha de inicio (formato "YYYY-MM-DD")
    - fecha_termino: str ‚Üí Fecha de t√©rmino (formato "YYYY-MM-DD")
    - page: int ‚Üí N√∫mero de p√°gina (por defecto 1)

    Retorna:
    - dict con los datos de respuesta
    """
    base_url = "https://isoapi.komtrax.komatsu"
    endpoint = f"{base_url}/provider/v1/{subscriber_id}/Fleet/Equipment/MakeModelSerial/{make_code}/{model}/{serial}/{dataitem}/{startdate}/{enddate}/{page}"
    
    headers = {"Authorization": f"Bearer {token}"}

    response = requests.get(endpoint, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Error al obtener datos Time Series: {response.status_code}\n{response.text}")


""" TOKEN """

# URL de autenticaci√≥n
auth_url = "https://isoapi.komtrax.komatsu/provider/token"

# Credenciales (reemplaza por las reales)

# Construcci√≥n del cuerpo de la petici√≥n (url encoded)
payload = {"grant_type": "password","Username": USERNAME,"password": PASSWORD}

# Encabezados
headers = {"Content-Type": "application/x-www-form-urlencoded"}

# Solicitar el token
response = requests.post(auth_url, data=payload, headers=headers)

if response.status_code == 200:
    token = response.json().get("access_token")
    print("Token obtenido:", token)
else:
    raise Exception(f"Error al obtener token: {response.status_code}\n{response.text}")


""" EJECUCI√ìN DATOS """

try:
    print("üì° Solicitando datos...")
    datos = obtener_datos_snapshot(token, SUBSCRIBER_ID, page=PAGE)
    print("‚úÖ Datos recibidos.")
except Exception as e:
    print("‚ùå Error:", str(e))

""" CREAR DATAFRAME CON DATOS DE MAQUINAS """
fleet_list = datos.get("Equipment", [])

lista = []

for maq in fleet_list:
    sigla = maq.get("EquipmentHeader", {}).get("EquipmentID")
    modelo = maq.get("EquipmentHeader", {}).get("Model")
    serie = maq.get("EquipmentHeader", {}).get("SerialNumber")
    lista.append({'Sigla': sigla, 'Model': modelo, 'Serial': serie})
    
df_maq = pd.DataFrame(lista)

""" CONSULTA POR SIGLA """
region = 16
sigla = '16N-MMKO-882'
data_item = "Locations"
fecha_inicio = "2024-01-01"
fecha_termino = "2025-12-01"

make_code = "0001"
modelo = df_maq[df_maq['Sigla'] == sigla]['Model'].values[0]
serie = df_maq[df_maq['Sigla'] == sigla]['Serial'].values[0]

#DATOS SNAPSHOT
maq = next((item for item in fleet_list if item.get("EquipmentHeader", {}).get("EquipmentID") == sigla), None)
ubicacion = maq.get("Location", {})
lat = ubicacion.get("Latitude")
lon = ubicacion.get("Longitude")
df_loc_today = pd.DataFrame.from_dict({'0': {"datetime": datetime, "Latitude": lat, "Longitude": lon}}, orient='index')

#DATOS TIMESERIES
datos_ts = obtener_datos_timeseries(token, SUBSCRIBER_ID, make_code, modelo, serie, data_item, fecha_inicio, fecha_termino, page=PAGE)
ubicaciones = datos_ts.get('Location')

loc = []

for ubicacion in ubicaciones:
    datetime = ubicacion.get('datetime')
    lat = ubicacion.get('Latitude')
    lon = ubicacion.get('Longitude')
    loc.append({'datetime': datetime, 'Latitude': lat, 'Longitude': lon})
    
df_loc = pd.DataFrame(loc)

#POST
url = "http://127.0.0.1:5000/ingest"
machine_id = sigla

df_loc.to_excel('locaciones.xlsx')

mem_bytes = len(json.dumps(ubicaciones).encode('utf-8'))
print(f"{mem_bytes/1024:.2f} KB totales")

for index, row in df_loc.iterrows():
    payload = {
        "machine_id": machine_id,
        "lat": row['Latitude'],
        "lon": row['Longitude'],
        "ts": row['datetime']
    }   
    try:
        r = requests.post(url, json=payload)
        print(f"{index+1}/5 ‚Üí", r.status_code, r.json())
    except Exception as e:
        print("Error:", e)
    time.sleep(5)  # env√≠a cada 5‚ÄØs para acelerar la demo
